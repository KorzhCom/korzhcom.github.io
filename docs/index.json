{
  "easyquery-js/index.html": {
    "href": "easyquery-js/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER"
  },
  "easyquery/end_users_guide.html": {
    "href": "easyquery/end_users_guide.html",
    "title": "1. EasyQuery: What’s That?",
    "keywords": "1. EasyQuery: What’s That? The majority of software products or web applications work with databases in some way. Usually, every such program (or application) contains an option of data search and/or filtering. It is always good when there are just a few search parameters, and when one can perform a query with a single text line (for example, Google search). Nevertheless, in most cases, you need to conduct a search while operating several parameters at the same time. For example, “Find all orders for product A made by USA companies, which have been both paid for and shipped by the beginning of the current month.” To specify indicate the conditions of such a query, you will need more than one text line. In such cases, EasyQuery would be much of help. It is a universal query builder UI for data search and filtering. It will allow you setting the search conditions of almost any difficulty while using exclusively natural language, terms, and expressions of which are familiar to user. 2. EasyQuery Components. The EasyQuery user interface consists of three main components – an Entities Panel, Conditions Panel, and Columns Panel. Data will be displayed in the Results Panel. The picture below can help you understand which is what. NB: SQL Panel is not a component of the EasyQuery UI. It is displayed here exclusively to demonstrate what a particular query would look like in SQL (Structured Query Language). You will not normally see this panel in most applications which use EasyQuery Each component can be used separately. For example, it’s possible to use only Conditions Panel for data filtration while the columns are defined internally inside application. About entities and attributes While working with EasyQuery, a user operates entities and their attributes. They constitute something like a structure of data that one can extract through construction of queries. Entity is some real-world object, information on which is stored in the database. Examples of entities are as follows: ‘Customer,’ ‘Order,’ ‘Product,’ etc. Every entity has an initial set of attributes or parameters. Thus, attributes for such entity as ‘Customer’ can be: Name, Address, Country, and others. Entities Panel This panel can be used as a visual representation of all entities and their attributes, which we can use to build queries. It can be used to add entity attributes to a Columns Panel (and they will be displayed in the result) or to a Conditions Panel (in order to actually set the query conditions). You can either move selected attributes to the corresponding panels with a mouse or use buttons Add column and Add condition ( ). Columns Panel Using columns panel you can specify the columns which you want to be displayed in your query results. You have a list of lines, each of them represents a column in the query results (in the Results Panel). Every line consists of Expression, which is an attribute, a Title, which serves as a column title in the Results Panel, and buttons – for sorting (on the left), aggregating and deleting (on the right). Conditions Panel Here you can specify filtering conditions for data selection. So the result of your query will include only the data that satisfy those conditions. Every line in the Conditions Panel corresponds to a single query condition. Every condition consists of 3 elements – an expression (some entity attribute), an operator, and value(s) (one or more). We have mentioned attributes above (e.g., ‘Company Name,’ ‘Product Price,’ and ‘Order Date’). Together with values, operators set certain limitations regarding data which is stored in a given attribute. For example, “(Date) is equal to 23 Jul 2014,” “(Quantity) is greater than 35,” “(Price) is less than 1,000,” and “(Name) starts with A.”"
  },
  "easyquery/getting-started/connect_to_database.html": {
    "href": "easyquery/getting-started/connect_to_database.html",
    "title": "Connect to your database",
    "keywords": "Connect to your database All our sample projects work with Northwind demo database either via SQL Server or SQLite connection. Obviously, to test EasyQuery you may want to connect that sample to your own database and try build queries and reports against the data stored there. There are 2 simple steps to achieve this goal: Step 1. Change the DbConnection At first step we just need to change the database connection used by EasyQuery components. This can be done in EasyQuery's initialization section (it’s inside app.UseEasyQuery(...) call for ASP.NET Core or in ConfigureEasyQueryOptions method of your API controller in ASP.NET projects): options.ConnectionString = “Your connection string”; //it's better to take it from the configuration options.UseDbConnection<YourConnectionType>(); For example, in case of Postgre SQL this piece of code will look like: options.ConnectionString = Configuration.GetConnectionString(\"MyDatabase\"); options.UseDbConnection<NpgsqlConnection>(); Step 2. Change the data model As you probably know, EasyQuery takes all meta-data from a special repository called “data model” (if not, please read $$-How it works-$$ and $$-Working with data models in EasyQuery-$$ articles first). In our sample projects we show different approaches of getting a data model. In some scenarios it's loaded from a pre-defined XML file created with Data Model Editor (DME) tool. In others, we get it directly from a DbContext or from database's meta-data. All these scenarios are described in great detail in $$-Working with data models in EasyQuery-$$ article. Whatever way you use you will need to change the model from our sample to your own data model. So, there are 3 posible options: Option 1. Data model is stored as XML or JSON file In this case you will need: To create your own data model using DME Place the created file to App_Data folder of your project. Let’s name that file MyModel.xml for example. In ASP.NET (not Core) project you will need to include MyModel.xml into your project and set the “Build action” for that file to “Content” (otherwise it will not be included on project publishing). Add the following piece of code to EasyQuery initialization section (it’s inside app.UseEasyQuery(...) call for ASP.NET Core or in ConfigureEasyQueryOptions method of your API controller in ASP.NET projects): options.UseDbModelLoader(_ => new FileModelLoader(“App_Data”)); Option 2. Data model is taken from a DbContext Here you just need to replace the DbContext from our sample with your own DbContext in UseDbContext call. For ASP.NET Core: app.UseEasyQuery(options => { . . . . options.UseDbContext<YourDbContextClass>(); }); For ASP.NET: protected override void ConfigureEasyQueryOptions(EasyQueryOptions options) { . . . . var dbContext = new YourDbContextClass(); options.UseDbContext(dbContext); } Option 3: Data model is taken directly from DB meta-data In this case you just need to setup your DbConnection (see the first step) and use the DbConnectionModelLoader class: options.ConnectionString = “Your connection string”; options.UseDbConnection<SqlConnection>(); options.UseDbConnectionModelLoader(); NB: Please note that both UseDbContext and UseDbConnectionModelLoader methods can take an additional parameter (a delegate) that allows you to configure different loader’s options (for example, you can filter some tables). So, after finishing this step you will got a working sample project that uses your data model and connects to your database instead the demo DB used in the sample originally. Next step: copying the code from sample to your project If you are satisifed of how the sample project works with your data you can copy the code and views that provide EasyQuery functionality to your own solution. Here is an article that describe how to do it"
  },
  "easyquery/getting-started/copying_code_from_sample_to_project.html": {
    "href": "easyquery/getting-started/copying_code_from_sample_to_project.html",
    "title": "Copying the EasyQuery's code from a sample to your project",
    "keywords": "Copying the EasyQuery's code from a sample to your project To copy a view/page with EasyQuery’s functionality (like “Advanced Search” or “Ad-hoc reporting”) you need to perform the following 3 simple steps: Install EasyQuery packages. This step is simple: just take a look which Korzh.EasyQuery.* packages are used in the sample you are copying your code from and install the same ones in your own project. Setup EasyQuery's services (like services.AddEasyQuery() in Startup.ConfigureServices) and EasyQuery's endpoint (for ASP.NET and ASP.NET Core projects) Copy the form/page/view that implements one of the search/reporting/filtering scenarios you would like to see in your solution. Below we are going to describe each of these steps more in detail for each platform/framework: ASP.NET Core project 1. Install EasyQuery packages Obviously, you will need Korzh.EasyQuery.AspNetCore package and possibly some other (depending on the scenario). As mentioned above, use the same packages as in the sample project you are copying the code from. 2. Copy the EasyQuery services configuration. It’s that services.AddEasyQuery()... piece in Startup.ConfigureServices 3. Copy EasyQuery middleware configuration It's app.UseEasyQuery(...) call in Startup.Configure. Our sample might have 2 (or more) middlewares (for demonstration purposes), one - for \"advanced search\", another one - for the \"ad-hoc reporting\" scenario. Most probably you will need only one of them. 4. Copy the page/view In our sample, the “Ad-hoc reporting\" page is an MVC view ( in Views\\Home\\AdhocReporting.cshtml) while “Advanced Search” is a Razor Page . Of course, in case of the MVC view you will also need to copy the corresponding action method from the controller (it's HomeController in case of of \"ad-hoc reporting\"). ASP.NET project 1. Install EasyQuery packages It's Korzh.EasyQuery.AspNet4 and other packages depending on the scenario. As in the previous case, use the same packages as in the sample project you are copying the code from. 2. Setup the WebAPI controller Server-side part of EasyQuery works via a WebAPI controller which handles all AJAX requests from the JS widgets placed on views/pages. So you need to install Web API in your project if you don't have it yet. This topic is covered in another our article: $$-Getting started for ASP.NET 4-$$ (use Step 2 there). If the WebAPI is installed in your project already, just copy the corresponding controller (e.g. \"AdvancedSearchController.cs\") to your project 3. Copy the form/page. If it's an MVC project, you will need to copy a .cshtml file (like AdvancedSearch.cshtml) and the corresponding action in the MVC Controller (it's HomeController in most of our samples). If it's a WebForms, please copy the .aspx page (EasyQuery.aspx most probably) and the corresponding code-behind file EasyQuery.aspx.cs). Windows Forms or WPF project 1. Install EasyQuery packages It's Korzh.EasyQuery.Wpf for WPF project or Korzh.EasyQuery.WinForms - for WinForms. As in the previous cases, you will also need some other EasyQuery packages depending on the scenario you use. Install the same packages as in the sample project you are copying the code from. 2. Copy the form with EasyQuery components It will be the .cs file and the corresponding files (like .Designer.cs or .Resources.resx). In our samples we usually place EasyQuery functionality on the the main form (MainForm.cs), so you will probably need to rename it in your project."
  },
  "easyquery/getting-started/started_asp_net_4.html": {
    "href": "easyquery/getting-started/started_asp_net_4.html",
    "title": "Getting started for ASP.NET 4 (MVC or WebForms)",
    "keywords": "Getting started for ASP.NET 4 (MVC or WebForms) NB: The fastest way to apply EasyQuery to your ASP.NET 4 project is to clone the whole EasyQuery samples Git repository, play with the demo project for MVC or WebForms from that repository and then copy necessary parts from that project to your own one. Below you will find the steps you need to do if you are going to add EasyQuery to your ASP.NET application from the scratch. The instructions are applied both for MVC and WebForms projects (with few little differences). It might look odd (since these two frameworks are tootally different) but it stems from how our demo projects are built. The main work on the client-side is done by our EasyQuery JavaScript library, so the view engine (Razor in MVC or .aspx in WebForms) is responsible only for the plain HTML rendering in this case and the sever-side part is covered by WebAPI library which is the same on both platforms. So, let's start. 0. Prerequisites 0.1 Register your trial version To start using EasyQuery trial you need to register and get your trial version keys first. It will take 1-2 minutes of your time. On registration you will get access to a special \"Client's Area\" of our web-site where you can see available licenses, get the keys, and submit a support request if necessary. 0.2 Choose the way you will work with your data model Data model - is a user-friendly representation of your project's database which is used by different EasyQuery components to show available entities, their attributes, conditional operators and the lists of available values during the query building process. So, first of all, you will need to choose the way you create your data model and/or load it in your application. There are several different ways of doing this. For more information please read Working with data model in EasyQuery article first. In this article, we assume that you use Entity Framework in your project and so, load your model directly from DbContext. 1. Install EasyQuery packages Obviously, first thing you will need to do - is to add EasyQuery NuGet packages to your project. You can use whatever way you prefer to do it: via NuGet Package Manager UI, using Package Manager Console or manually editing .csproj file and adding necessary <PackageReference ... nodes into it. The only package which is absolutely required to apply EasyQuery to ASP.NET is: Korzh.EasyQuery.AspNet4 In some cases you might also need to add the following packages: Korzh.EasyQuery.EntityFramework6 - if your project uses Entity Framework 6.x. Korzh.EasyQuery.DataExport - if you want to add some data exporting functionality. Korzh.EasyQuery.Linq - if you want to implement a data filtering scenario in your project. Step 2: Setup WebAPI controller Server-side part of EasyQuery works via a WebAPI controller which handles all AJAX requests from the JS widgets placed on the view. While this is a usual thing for ASP.NET MVC / WebAPI applications, for a WebForms project it might look quite odd. But don't worry, it works well, we tried! 2.1 Install WebAPI NuGet packages EasyQuery's server-side part is implemented as a WebAPI controller. So, if you don't use WebAPI in your web-application yet - you will need to add some NuGet packages to your project: Microsoft.AspNet.WebApi.Core (it must be installed together with Korzh.EasyQuery.AspNet4 but you might want to update it to the latest version) Microsoft.AspNet.WebApi.WebHost 2.2 Add WebApiConfig.cs After installing WebAPI package you will also need to add a special configuration file (App_Start/WebApiConfig.cs) and modify your Global.asax.cs. The simplest way will be to get that file from our sample project on GitHub and copy it to App_Start folder in your project (or to merge with the one you are using now). Please note, we have re-configured the default WebAPI routing mechanism to make it use the attributes from the base controller classes (because they are not taken into the account by default). It is necessary for a proper work of the new WebAPI controller you will add on the next step. The routes for all controller's actions are defined in the base class - that's why we need that routing inheritance to be turned on. NB1: The last solution about enabling the routing inheritance attributes works only with WebAPI version 2.2 or higher. So, if your project uses an older version of WebAPI packages - please upgrade them first. NB2: WebApiConfig.cs from our sample contains also 2 RegisterExporter calls which register the exporters for CSV and HTML formats. You can comment those two lines for the moment. If you want to add the exporting functionality - you can later install Korzh.EasyQuery.DataExport package and uncomment those two lines back. 2.3 Modify Global.asax.cs After that we need to update Global.asax.cs file in your project to register WebAPI services and routes. Here is an example of this file from our samples: for MVC project for WebForms project Merge the content of one of these files (depending on what type of project you have) with Global.asax.cs in your project. Additionally Application_Start method of Global.asax.cs file is a good place to set your trial license keys for EasyQuery that you got on the Step 0: protected void Application_Start() { Korzh.EasyQuery.AspNet.License.Key = \"Your license key for EasyQuery ASP.NET goes here\"; Korzh.EasyQuery.AspNet.JsLicense.Key = \"Your license key for EasyQuery.JS goes here\"; . . . . . } 2.4 Add new API controller To simplify the task we prepare a base class for such controller from which you can derive your own one. All necessary endpoints (actions) are already defined and properly handled in that basic class. So, all you need to do is to set some options in the overridden virtual method ConfigureEasyQueryOptions. Here are the controllers you can use: For MVC project: AdvancedSearchController or EasyReportController For WebForms project: AdvancedSearchController Just download the controller of your choice and place it to the Controllers/EasyQuery folder in your MVC project (or to Controllers folder for WebForms one). Obviously, you will also need to change the namespace ID from EqAspNet4Demo.Controllers to YourProjectDefaultNamespace.Controllers. For \"EasyReportController\" you will also need to copy to your project the service classes which is used for caching and query(reports) saving. As it was mentioned above, to adjust the new contoller for your application you just need to modify a few lines in ConfigureEasyQueryOptions procedure: First of all, change the ID of the data model in options.DefaultModelId = ... line or remove it completely if you plan to load your model from DbContext Modify the name of your connection string parameter (if it's not DefaultConnection as in example) Change the way you are going to load your data model. In our sample we are using the model created with Data Model Editor and saved as NWindSQL.xml file in App_Data folder. If you plan to load your model directly from your DbContext - then remove options.UseModelLoader(...); line and replace it with the following: var dbContext = ApplicationDbContext.Create(); options.UseDbContext(dbContext); Finally, you might want to change the type of the connection in options.UseDbConnection<..>() call if you use another than SQL Server database (e.g. MySqlConnection or OracleConnection) 3. Add a new view/page The next step will be to add a page which introduces an advanced search or ad-hoc reporting functionality in your project. This is the part which differs for MVC and WebForms projects. In case of MVC project you will need to add a new view and a corresponding controller's action. In WebForms - it will be an .aspx file with a code-behind .aspx.cs We are going to cover both those cases below. 3.1 For MVC projects The simplest way to do it - is to copy the page you need from our sample project. Here are the direct links: Advanced search view Ad-hoc reporting Of course, you will need to add a corresponding controller action for the new view so it will be accessible by some URL. In our sample we add those actions to the Home controller but it can be any other controller in your own project of course. Here is how such new action can look like: public class HomeController : Controller { . . . . public ActionResult AdvancedSearch() { return View(); } } NB: About Styles section Please note that some styles in our advanced-search view are placed into Styles section. So, you will either need to add @RenderSection(\"Styles\", required: false) line to your Views/Shared/_Layout.chstml or to move those stylesheet links outside the Styles secition in your AdvancedSearch.cshtml 3.2 For WebForms As for MVC you can just take the page from our sample. Here is the code behind class for that page as well. Build. Run. Enjoy! That's it. If everything was done right on the previous steps - your application will be built and run sucessfully and you can open and you will be able to open new page by the path you specified on the step 3.1 (e.g. /Home/AdvancedSearch if you leave it as it's listed there). If something goes wrong - feel free to contact us: you can create an issue on GitHub or submit a support request on our website."
  },
  "easyquery/index.html": {
    "href": "easyquery/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER"
  },
  "easyquery/intro.html": {
    "href": "easyquery/intro.html",
    "title": "Introduction",
    "keywords": "Introduction If in short, EasyQuery - a set of components that allow you (as a developer) to implement a functional, user-friendly query builder in your application. Any modern application typically operates with a certain set of data. Here we are talking about almost any type of applications: the classic desktop programs, web applications or applications for different mobile platforms. All functionality of any program can be divided into two main components: either it is data entry or retrieval. If the first part is more or less clear, the second involves many different aspects: it is searching, sorting, filtering, reporting, statistics, etc. One thing unites all these subsystems: the users usually require some way to specify what data they need. For example: for what period, for which client, product, employee, etc. Most often, program data are stored in a kind of relational database (SQL Server, MySQL, Access, SQLite, etc.) and support the SQL query language, or some variation of it (HQL, Entity SQL, etc.). Besides, in recent years so-called No-SQL databases become very popular. Many of them have their query languages. Regardless of the database type and the query language is a programmer’s task to implement a convenient UI for search and filtering data in the program. Usually it looks like the following: The user enters some values which will define the search criteria. For example, a phone number or a client’s ZIP code. The program builds a query using these values, executes the query and displays the result to the user. In this scheme, a set of fields on which to search and query itself remains the same. Only the values of some query parameters can be changed. If you need to add in a search some new attributes (for example, to search additionally by client’s email or address), then it will be necessary to make some changes in the program - add fields on the form, modify the SQL statement in the code, etc. The solution of the problem is obvious: you need to give your users a possibility to build their queries, with any attributes and search criteria. There is a class of programs, called \"query builders\" which solve this problem. However, most such programs are not suitable for regular users since they require some understanding database principles (tables, joins, primary/foreign keys, etc.). Also, these solutions usually offered as standalone programs that require installation and can not be called from your application. To solve the above problems we developed EasyQuery library. It is a set of components that you can embed in your program. At the moment, there are several editions of EasyQuery for different platforms: Windows Forms, ASP.NET WebForms, ASP.NET MVC, WPF, Silverlight. EasyQuery components offer a user-friendly, and (also crucial) unified query builder UI for your applications. Saying \"user-friendly\" for query builder we mean the following: Users operate the concepts that are familiar to them. For example: \"Company name\" instead of \"customer.com_name\" or \"start with ...\" instead LIKE 'A%' For each search attribute, you can specify a set of valid values. The user will only need to select the value (s) from this list, instead of typing it manually. The query itself is presented to the user as a phrase in a natural language, which he/she can modify visually (add a new statement or modify the existing ones). Any query condition can be temporarily disabled (without removing) to see how the result data set will change after that. And a lot of other little things that make it easier for users to find the data they need. EasyQuery is easily configured to work with any database and with a plurality of different query languages. Any query built by users with EasyQuery can be easily saved to a file or database and then loaded back when necessary."
  },
  "easyreport/index.html": {
    "href": "easyreport/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE.",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "localizer/index.html": {
    "href": "localizer/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER"
  }
}